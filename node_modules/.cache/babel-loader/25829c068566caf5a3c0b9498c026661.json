{"ast":null,"code":"var _jsxFileName = \"/Users/Reggie/Projects/chill-vibes/src/components/LibrarySong.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying\n}) => {\n  // Event Handler \n  const songSelectHandler = () => {\n    // Selecting song\n    setCurrentSong(song); // check if song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: \"library-song\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/Reggie/Projects/chill-vibes/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","playPromise","current","play","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA,EAA9B;AAAkCC,EAAAA,QAAlC;AAA4CC,EAAAA;AAA5C,CAAD,KAA4D;AAChF;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B;AACAJ,IAAAA,cAAc,CAACF,IAAD,CAAd,CAF4B,CAG5B;;AACA,QAAGK,SAAH,EAAc;AACV,YAAME,WAAW,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,IAAjB,EAApB;AAEH;AACJ,GARD;;AAUI,sBACI;AAAK,IAAA,OAAO,EAAEH,iBAAd;AAAiC,IAAA,SAAS,EAAC,cAA3C;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEN,IAAI,CAACU,IAAf;AAAqB,MAAA,GAAG,EAAEV,IAAI,CAACW;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACA;AAAA,kBAAKX,IAAI,CAACU;AAAV;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,kBAAKV,IAAI,CAACY;AAAV;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CArBD;;KAAMb,W;AAuBN,eAAeA,WAAf","sourcesContent":["import React from 'react'\n\nconst LibrarySong = ({song, songs, setCurrentSong, id, audioRef, isPlaying}) => {    \n// Event Handler \nconst songSelectHandler = () => {\n    // Selecting song\n    setCurrentSong(song)\n    // check if song is playing\n    if(isPlaying) {\n        const playPromise = audioRef.current.play()\n        \n    }\n}\n\n    return(\n        <div onClick={songSelectHandler} className=\"library-song\">\n            <img alt={song.name} src={song.cover} />\n            <div className=\"song-description\">\n            <h3>{song.name}</h3>\n            <h4>{song.artist}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default LibrarySong"]},"metadata":{},"sourceType":"module"}