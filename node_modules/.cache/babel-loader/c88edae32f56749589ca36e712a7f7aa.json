{"ast":null,"code":"var _jsxFileName = \"/Users/Reggie/Projects/chill-vibes/src/components/LibrarySong.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs\n}) => {\n  // Event Handler \n  const songSelectHandler = () => {\n    // Selecting song\n    setCurrentSong(song); // Add active state \n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(); // check if song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? 'selected' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/Reggie/Projects/chill-vibes/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","newSongs","map","active","playPromise","current","play","undefined","then","audio","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA,EAA9B;AAAkCC,EAAAA,QAAlC;AAA4CC,EAAAA,SAA5C;AAAuDC,EAAAA;AAAvD,CAAD,KAAsE;AAC1F;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B;AACAL,IAAAA,cAAc,CAACF,IAAD,CAAd,CAF4B,CAG5B;;AACA,UAAMQ,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAWT,IAAD,IAAS;AAChC,UAAGA,IAAI,CAACG,EAAL,KAAYA,EAAf,EAAmB;AACf,eAAM,EACF,GAAGH,IADD;AAEFU,UAAAA,MAAM,EAAE;AAFN,SAAN;AAIH,OALD,MAKO;AACH,eAAM,EACF,GAAGV,IADD;AAEFU,UAAAA,MAAM,EAAE;AAFN,SAAN;AAIH;AACJ,KAZgB,CAAjB;AAaAJ,IAAAA,QAAQ,GAjBoB,CAkB5B;;AACA,QAAGD,SAAH,EAAc;AACV,YAAMM,WAAW,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAGF,WAAW,KAAKG,SAAnB,EAA8B;AAC1BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AACxBZ,UAAAA,QAAQ,CAACQ,OAAT,CAAiBC,IAAjB;AACH,SAFD;AAGH;AACJ;AACJ,GA3BD;;AA6BI,sBACI;AAAK,IAAA,OAAO,EAAEN,iBAAd;AAAiC,IAAA,SAAS,EAAG,gBAAeP,IAAI,CAACU,MAAL,GAAc,UAAd,GAA2B,EAAG,EAA1F;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEV,IAAI,CAACiB,IAAf;AAAqB,MAAA,GAAG,EAAEjB,IAAI,CAACkB;AAA/B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACA;AAAA,kBAAKlB,IAAI,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,kBAAKjB,IAAI,CAACmB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAxCD;;KAAMpB,W;AA0CN,eAAeA,WAAf","sourcesContent":["import React from 'react'\n\nconst LibrarySong = ({song, songs, setCurrentSong, id, audioRef, isPlaying, setSongs}) => {    \n// Event Handler \nconst songSelectHandler = () => {\n    // Selecting song\n    setCurrentSong(song)\n    // Add active state \n    const newSongs = songs.map((song) =>{\n        if(song.id === id) {\n            return{\n                ...song,\n                active: true,\n            }\n        } else {\n            return{\n                ...song,\n                active: false,\n            }\n        }\n    })\n    setSongs()\n    // check if song is playing\n    if(isPlaying) {\n        const playPromise = audioRef.current.play()\n        if(playPromise !== undefined) {\n            playPromise.then((audio) => {\n                audioRef.current.play()\n            })\n        }\n    }\n}\n\n    return(\n        <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : ''}`}>\n            <img alt={song.name} src={song.cover} />\n            <div className=\"song-description\">\n            <h3>{song.name}</h3>\n            <h4>{song.artist}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default LibrarySong"]},"metadata":{},"sourceType":"module"}