{"ast":null,"code":"var _jsxFileName = \"/Users/Reggie/Projects/chill-vibes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react'; // import styles\n\nimport './styles/App.scss'; // Adding components\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library'; // Import util\n\nimport data from './util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Ref\n  const audioRef = useRef(null); // State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  }; // Event handlers\n\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      audioRef: audioRef,\n      playSongHandler: playSongHandler,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onLoadedMetadata: timeUpdateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Kc/7Yj03h0ab5z2tYr3oYZa8UNQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Reggie/Projects/chill-vibes/src/App.js"],"names":["useState","useRef","Player","Song","Library","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","timeUpdateHandler","e","current","target","playSongHandler","pause","play","audio"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,MAAlB,QAA+B,OAA/B,C,CACA;;AACA,OAAO,mBAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB,CAFa,CAGb;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACK,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACvCgB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;;AAIA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASL,WAAzB;AACA,UAAMC,QAAQ,GAAGE,CAAC,CAACE,MAAF,CAASJ,QAA1B;AACAF,IAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAcE,MAAAA,WAAW,EAAEI,OAA3B;AAAoCH,MAAAA;AAApC,KAAD,CAAX;AACD,GAJD,CAXa,CAgBb;;;AACA,QAAMK,eAAe,GAAG,MAAM;AAC5B,QAAIV,SAAJ,EAAe;AACbL,MAAAA,QAAQ,CAACa,OAAT,CAAiBG,KAAjB;AACAV,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACa,OAAT,CAAiBI,IAAjB;AACAX,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;AACF,GARD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEF,WAAnB;AAAgC,MAAA,cAAc,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEI,WADf;AAEE,MAAA,QAAQ,EAAED,QAFZ;AAGE,MAAA,QAAQ,EAAEP,QAHZ;AAIE,MAAA,eAAe,EAAEe,eAJnB;AAKE,MAAA,SAAS,EAAEV,SALb;AAME,MAAA,YAAY,EAAEC,YANhB;AAOE,MAAA,WAAW,EAAEH;AAPf;AAAA;AAAA;AAAA;AAAA,YAHF,eAYE,QAAC,OAAD;AACE,MAAA,cAAc,EAAEC,cADlB;AAEE,MAAA,KAAK,EAAEH,KAFT;AAGE,MAAA,QAAQ,EAAED;AAHZ;AAAA;AAAA;AAAA;AAAA,YAZF,eAkBE;AACE,MAAA,YAAY,EAAEW,iBADhB;AAEE,MAAA,GAAG,EAAEX,QAFP;AAGE,MAAA,GAAG,EAAEG,WAAW,CAACe,KAHnB;AAIE,MAAA,gBAAgB,EAAEP;AAJpB;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GArDQZ,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import {useState, useRef} from 'react';\n// import styles\nimport './styles/App.scss';\n// Adding components\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\n// Import util\nimport data from './util';\n\nfunction App() {\n  // Ref\n  const audioRef = useRef(null);\n  // State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({...songInfo, currentTime: current, duration});\n  };\n  // Event handlers\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  return (\n    <div className=\"App\">\n      {/* <h1>Chill Vibes Music</h1> */}\n      <Song currentSong={currentSong} setCurrentSong={setCurrentSong} />\n      <Player\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        audioRef={audioRef}\n        playSongHandler={playSongHandler}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n      />\n      <Library\n        setCurrentSong={setCurrentSong}\n        songs={songs}\n        audioRef={audioRef}\n        \n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onLoadedMetadata={timeUpdateHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}